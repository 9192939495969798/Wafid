#!/usr/bin/env python
# -*- coding:utf-8 -*-
# waf identify prog
# Author Cryin@insight-labs.org

from copy import deepcopy
from urlparse import urljoin
from lxml.html import etree
import re
import os
import requests
import optparse
import sys

WAF_ATTACK_VECTORS = (
                        "",  # NULL
                        "search=<script>alert(/xss/)</script>",
                        "file=../../../../../../etc/passwd",
                        "id=1 AND 1=1 UNION ALL SELECT 1,2,3,table_name FROM information_schema.tables WHERE 2>1--"
                     )
WAF_KEYWORD_VECTORS = ( 
                        "<a href=\"http://bbs.jiasule.com/thread-124-1-1.html",
                        "This error was generated by Mod_Security",
                        "has been blocked in accordance with company policy"
                      )
WAF_PRODUCT_NAME = (
                     "Knownsec jiasule Web Application Firewall",
                     "ModSecurity: Open Source Web Application Firewall",
                     "Palo Alto Firewall"
                   )
                     
class wafid(object):
    def __init__(self,url):

        self._finger = ''
        self._nowaf = ''
        self._url = url
    def _run(self):
        try:
            self.scan_site()
        except:
            raise

    def report_waf(self):
        print "identify website waf type is : "+self._finger

    def scan_site(self):
        if "http" not in self._url:
            print "please check site url : " +self._url
            return False
        for vector in range(0,len(WAF_ATTACK_VECTORS)):
            turl= ''
            turl = deepcopy(self._url)

            add_url = WAF_ATTACK_VECTORS[vector]
            turl = urljoin(turl, add_url)
            resp = requests.get(turl)
            if self.check_waf(resp):
                self.report_waf()
                return True
            else:
                return False
        
        return True

    def regexp_header(self,rule_dom,waf_dom,head_type,resp):
        if head_type in resp.headers:

            regmatch_dom = rule_dom[0].xpath("regmatch")
            regexp_doms = regmatch_dom[0].xpath("regexp") if regmatch_dom != None else []
        
            for regexp_dom in regexp_doms:
                exp_pattern = re.compile(regexp_dom.text)
                if exp_pattern.search(resp.headers[head_type]):
                   self._finger=waf_dom.get("name")
                  # print "identify website waf type is : "+self._finger
                   return True
                else:
                   print "regmatch head_type regexp false!"
      
            if not self._finger:
                return False 
            else:
                return False
        return False
    
    def check_resp(self,resp):
        content=''
        if len(resp.content) != 0:
            content = resp.content.strip()
        for waf_keyword in range(0,len(WAF_KEYWORD_VECTORS)):
            if WAF_KEYWORD_VECTORS[waf_keyword] in content:
                self._finger=WAF_PRODUCT_NAME[waf_keyword]
               # print "identify website waf type with respcontent is : "+self._finger
                return True
            else:
                self._nowaf="This website has no waf or identify false!!!"
                print "get waf finger false:"+self._nowaf
                return False
        return False

    def check_waf(self, resp):
        if not resp.content:
            return
        self._xmlstr_dom = etree.parse('finger.xml')
        waf_doms = self._xmlstr_dom.xpath("waf")
        for waf_dom in waf_doms:
            finger_dom = waf_dom.xpath("finger")
            rule_dom = finger_dom[0].xpath("rule")
            head_type =rule_dom[0].get("header").lower()
            if head_type in resp.headers:
                if self.regexp_header(rule_dom,waf_dom,head_type,resp):
                    return True
                else:
                    self._nowaf="This website has no waf or identify false!!!"
                    print "get waf finger false:"+self._nowaf
            else:
                print "head type search ..."
        
        if check_resp(resp):
           return True
        return False

if __name__ == '__main__':
    parser = optparse.OptionParser('usage: python %prog [options](eg: python %prog http://www.insight-labs.org/)')
    parser.add_option('-u', '--url', dest = 'url', type = 'string', help = 'target url')

    (options, args) = parser.parse_args()
    if options.url == None or options.url == "":
        parser.print_help()
        sys.exit()
    url =options.url
    wafidentify = wafid(url)
    wafidentify._run()

